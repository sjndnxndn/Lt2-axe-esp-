-- ESP table
local espAxes = {}
local runService = game:GetService("RunService")
local camera = workspace.CurrentCamera

-- Checks if a tool is an axe by name
local function isAxe(tool)
    return tool:IsA("Tool") and tool:FindFirstChild("Handle") and tool.Name:lower():find("axe")
end

-- Clears existing ESP drawings
local function clearESP()
    for _, v in pairs(espAxes) do
        if v.Text then v.Text:Remove() end
    end
    espAxes = {}
end

-- Adds 2D ESP for a given axe
local function addESP(tool, isHeld)
    local espText = Drawing.new("Text")
    espText.Size = 13
    espText.Center = true
    espText.Outline = true
    espText.Font = 2
    espText.Color = isHeld and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(100, 255, 100)
    espText.Text = (isHeld and "[Held] " or "") .. tool.Name
    espText.Visible = true

    espAxes[#espAxes + 1] = {
        Tool = tool,
        Text = espText,
        Held = isHeld
    }
end

-- Main update function
local function updateAxes()
    clearESP()
    -- Axes on ground
    for _, tool in pairs(workspace:GetDescendants()) do
        if isAxe(tool) and not tool.Parent:IsA("Backpack") and not tool.Parent:FindFirstChildWhichIsA("Humanoid") then
            addESP(tool, false)
        end
    end
    -- Held axes
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Character then
            for _, tool in pairs(player.Character:GetChildren()) do
                if isAxe(tool) then
                    addESP(tool, true)
                end
            end
        end
    end
end

-- ESP position updater
runService.RenderStepped:Connect(function()
    for i, v in pairs(espAxes) do
        if v.Tool and v.Tool:FindFirstChild("Handle") and v.Tool.Handle:IsDescendantOf(workspace) then
            local pos, onScreen = camera:WorldToViewportPoint(v.Tool.Handle.Position)
            v.Text.Visible = onScreen
            if onScreen then
                v.Text.Position = Vector2.new(pos.X, pos.Y)
            end
        else
            v.Text.Visible = false
        end
    end
end)

-- Refresh every 10 seconds
updateAxes()
while true do
    task.wait(10)
    updateAxes()
end
